原理說明
孤立森林 (Isolation Forest) 是一種基於隨機森林思想的異常檢測演算法，其核心原理是利用數據點的「易於隔離」特性來識別異常點。以下是其工作原理：

隔離概念：
正常數據點通常位於數據集的密集區域，而異常點通常是孤立的，位於稀疏區域。
孤立森林假設異常點需要較少的隨機分割（或路徑長度）就能被隔離出來。
隨機分割：
演算法通過隨機選擇一個特徵並隨機選取一個分割值，遞迴地將數據空間分割成子區域。
這種隨機分割過程類似於構建一棵決策樹，但不依賴於信息增益等標準，而是完全隨機。
路徑長度：
對於每個數據點，計算它從根節點到葉節點的路徑長度。異常點通常在較短的路徑上被隔離（因為它們位於數據集邊緣），而正常點需要較長的路徑。
路徑長度的平均值用來評估異常分數：越短的路徑表示越可能是異常點。
異常分數：
通過多棵隨機樹（森林）的平均路徑長度，計算每個數據點的異常分數。
分數越低（接近 -1），越可能是異常點；分數越高（接近 1），越可能是正常點。
參數 contamination：
這是預先設定的異常點比例（例如 0.05 表示 5%），用來調整模型對異常的敏感度。
特點與優勢
無監督學習：不需標記數據即可檢測異常，適合數據標記成本高的場景。
高效性：相較於距離或密度-based 方法，孤立森林對高維數據和大型數據集的計算效率較高。
適用場景：廣泛用於欺詐檢測、網絡安全、設備故障預測等領域。
程式說明
數據生成：使用 make_blobs 創建一個主集群，並添加隨機異常點。
模型訓練：IsolationForest 通過隨機樹的集合學習數據的分佈。
視覺化：使用散點圖顯示正常點（標籤 1）和異常點（標籤 -1）。
輸出：列出部分異常點的索引和總數。
預期輸出
散點圖將顯示大多數點聚集成一團，少數點被標記為異常（顏色不同）。
異常點數量應接近設定的 contamination 比例（例如 15-20 個）。